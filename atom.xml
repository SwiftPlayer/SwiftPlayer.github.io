<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Haofree</title>
  <subtitle>做自己所做，That&#39;s all</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/SwiftPlayer/SwiftPlayer.github.io.git/"/>
  <updated>2017-08-25T14:33:49.000Z</updated>
  <id>https://github.com/SwiftPlayer/SwiftPlayer.github.io.git/</id>
  
  <author>
    <name>Haofree(SwiftPlayer)</name>
    <email>javafree@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SiriKit预研</title>
    <link href="https://github.com/SwiftPlayer/SwiftPlayer.github.io.git/2017/07/14/SiriKit%E9%A2%84%E7%A0%94/"/>
    <id>https://github.com/SwiftPlayer/SwiftPlayer.github.io.git/2017/07/14/SiriKit预研/</id>
    <published>2017-07-14T05:34:15.000Z</published>
    <updated>2017-08-25T14:33:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、SiriKit介绍"><a href="#一、SiriKit介绍" class="headerlink" title="一、SiriKit介绍"></a>一、SiriKit介绍</h2><p><code>Siri</code>是一款苹果 iOS 系统提供的智能语音助手软件，它的全名是 <code>Speech Interpretation and Recognition Interface</code>。2011年 <code>Siri</code>第一次以 iOS 内置软件的形式随 <code>iPhone 4s</code> 一同问世之后，终于在 <code>WWDC 2016</code> 上，苹果开放了<code>Siri</code> 的 API，开发者们可以利用<code>SiriKit</code>将自己的服务提供给用户。<br>备注：<code>SiriKit</code>是系统调用，是一个语义处理结合扩展<code>UI</code>的框架，不是语音转文字的框架。</p>
<h4 id="1、SiriKit提供11类服务领域，详情请见苹果官方文档"><a href="#1、SiriKit提供11类服务领域，详情请见苹果官方文档" class="headerlink" title="1、SiriKit提供11类服务领域，详情请见苹果官方文档"></a>1、SiriKit提供11类服务领域，详情请见<a href="https://developer.apple.com/documentation/sirikit#//apple_ref/doc/uid/TP40016875-CH9-SW2" target="_blank" rel="external">苹果官方文档</a></h4><table>
<thead>
<tr>
<th>SiriKit 服务领域（Domain）</th>
<th>对应的意图(Intent)</th>
</tr>
</thead>
<tbody>
<tr>
<td>语音和视频通话 (VoIP calling)</td>
<td>INSearchCallHistoryIntent、INStartAudioCallIntent、INStartVideoCallIntent</td>
</tr>
<tr>
<td>发送消息 (Messaging)</td>
<td>INSendMessageIntent</td>
</tr>
<tr>
<td>收款或者付款 (Payments)</td>
<td>INSendPaymentIntent、INRequestPaymentIntent</td>
</tr>
<tr>
<td>列表和笔记 (Lists and Notes)</td>
<td>INCreateNoteIntent、INAppendToNoteIntent</td>
</tr>
<tr>
<td>视觉编码 (Visual Codes)</td>
<td>INGetVisualCodeIntent</td>
</tr>
<tr>
<td>图片搜索 (Photo search)</td>
<td>INSearchForPhotosIntent</td>
</tr>
<tr>
<td>管理锻炼 (Workouts)</td>
<td>INEndWorkoutIntent、INPauseWorkoutIntent 、INStartWorkoutIntent 、 INResumeWorkoutIntent 、INCancelWorkoutIntent</td>
</tr>
<tr>
<td>行程预约  (Ride booking)</td>
<td>INRequestRideIntent、INGetRideStatusIntent、 INListRideOptionsIntent、 INGetRideStatusIntent</td>
</tr>
<tr>
<td>车载管理 (Car Commands)</td>
<td>INGetCarLockStatusIntent、INSetCarLockStatusIntent、INActivateCarSignalIntent</td>
</tr>
<tr>
<td>车载系统 (CarPlay)</td>
<td>INSetAudioSourceInCarIntent、 INSetClimateSettingsInCarIntent、 INSetSeatSettingsInCarIntent、INSaveProfileInCarIntent、INSetProfileInCarIntent、INSetRadioStationIntent</td>
</tr>
<tr>
<td>餐厅订位  (Restaurant Reservations)</td>
<td>INBookRestaurantReservationIntent、  INGetAvailableRestaurantReservationBookingDefaultsIntent、 INGetAvailableRestaurantReservationBookingsIntent、 INGetRestaurantGuestIntent、 INGetUserCurrentRestaurantReservationBookingsIntent</td>
</tr>
</tbody>
</table>
<p>简单来说，在<code>SiriKit</code>的开发功能基本上就是在苹果提供的这些领域(<code>Domain</code>)上，在App开发中需要开发哪种领域的功能，就要在对应的<code>plist</code>文件中添加对应的<code>Intent</code>支持（<em>具体在哪个plist文件下文有说明</em>）那什么是<code>Intent</code>？<br>备注：SiriKit不是万能的，语义的处理流程要按照苹果的套路来（应用领域，意图），界面UI也套路来，不能调用App内部页面，具体UI会有SiriKit的UI扩展来实现。</p>
<h4 id="2、Intent的说明"><a href="#2、Intent的说明" class="headerlink" title="2、Intent的说明"></a>2、Intent的说明</h4><p>要想了解Intent，首先要清楚SiriKit的外部工作流程：<br>1)、 Siri完成语音识别和语义分析；<br>2)、会根据你词汇中的关键词识别出你属于上述11种领域中的哪一种；<br>3)、然后将结构化语音分析结果打包成一个某个领域（Domain）的意图(Intent)；<br>4)、接着交给支持这个意图（Intent）的第三方应<br>用，第三方应用被启动，从 传入的Intent中获取相应的信息，完成操作。<br>整个宏观的流程如下图：<br><img src="media/14994794583384/SiriKit%E6%B5%81%E7%A8%8B.png" alt="SiriKit流程"></p>
<p>例如，上图演示中提到了的例句 “用苏宁发消息给小明”，</p>
<p>领域 （Domain）：Messaging<br>意图 （Intent）：Send a message （INSendMessageIntent）<br>意图参数 （Intent Parameter）<br>收件人（recipients）：小明<br>消息内容（content）：空<br><strong>备注：（如果没有消息内容，这时就会涉及到Sikit的API中提供的处理机制，这个机制会调Siri反问你要发送什么内容，这个就涉及到下文提到的SiriKit相关功能和处理流程，会有不同的扩展和类在处理这个问题）</strong></p>
<h2 id="二、SiriKit功能开发介绍"><a href="#二、SiriKit功能开发介绍" class="headerlink" title="二、SiriKit功能开发介绍"></a>二、SiriKit功能开发介绍</h2><h4 id="1、发消息意图API（举例）"><a href="#1、发消息意图API（举例）" class="headerlink" title="1、发消息意图API（举例）"></a>1、发消息意图API（举例）</h4><h5 id="1）、发消息INSendMessageIntent配置"><a href="#1）、发消息INSendMessageIntent配置" class="headerlink" title="1）、发消息INSendMessageIntent配置"></a>1）、发消息INSendMessageIntent配置</h5><p>涉及到<code>SiriKit</code>的基本项目文件：<br><img src="media/14994794583384/siri%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%9B%BE.png" alt="siri目录结构图"></p>
<p><img src="media/14994794583384/IntentConfig.png" alt="IntentConfig"></p>
<h5 id="2）、发消息INSendMessageIntent相关协议方法"><a href="#2）、发消息INSendMessageIntent相关协议方法" class="headerlink" title="2）、发消息INSendMessageIntent相关协议方法"></a>2）、发消息INSendMessageIntent相关协议方法</h5><p>一个标准的意图语音被<code>Siri</code>识别之后，<code>SiriKit</code>会先进入一个继承于<code>INExtension</code>的指定意图流程入口(<code>NSExtensionPrincipalClass</code>)类<code>IntentHandler.m</code>(默认类)。下面在这个相关类会处理整个流程：<br><img src="media/14994794583384/IntentLifeCycle.png" alt="IntentLifeCycle"></p>
<table>
<thead>
<tr>
<th>方法列表</th>
<th>中文解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>-resolveRecipientsForSendMessage:withCompletion:</td>
<td>解析发送消息语义，提取意图对象</td>
</tr>
<tr>
<td>- resolveContentForSendMessage:withCompletion:</td>
<td>解析发送消息内容方法</td>
</tr>
<tr>
<td>- confirmSendMessage:completion:</td>
<td>确认方法</td>
</tr>
<tr>
<td>- handleSendMessage:completion:</td>
</tr>
</tbody>
</table>
<p> 处理方法 |</p>
<p>意图的生命周期如下图文描述：</p>
<p>一个典型的<code>Intent</code>事件的处理过程中有这三个步骤<code>Resolve</code>、<code>Confirm</code>和<code>Handle</code></p>
<ol>
<li><code>Resolve</code>阶段。在<code>Siri</code>获取到用户的语音输入之后，生成一个<code>INIntent</code>对象，将语音中的关键信息提取出来并且填充对应的属性。这个对象在稍后会传递给我们设置好的<code>INExtension</code>子类对象进行处理，根据子类遵循的不同协议来选择不同的解决方案。</li>
</ol>
<ol>
<li><code>Confirm</code>阶段。在上一个阶段通过<code>handlerForIntent:(INIntent *)</code>返回了处理<code>Intent</code>的对象，此阶段会依次调用<code>confirm</code>打头的实例方法来判断<code>Siri</code>填充的信息是否完成。匹配的判断结果包括<code>Exactly one match</code>、<code>Two or more matches</code>以及<code>No match</code>三种情况。这个过程中可以让<code>Siri</code>向用户征求更具体的参数信息。</li>
</ol>
<ol>
<li><code>Handle</code>阶段。在<code>confirm</code>方法执行完成之后，<code>Siri</code>进行最后的处理阶段，生成答复对象，并且向此Intent对象确认处理结果然后执显示结果给用户看。<br><img src="media/14994794583384/resolve_confirm_handle_cycle.png" alt="resolve_confirm_handle_cycle"></li>
</ol>
<h5 id="3）、发消息INSendMessageIntent的意图对象"><a href="#3）、发消息INSendMessageIntent的意图对象" class="headerlink" title="3）、发消息INSendMessageIntent的意图对象"></a>3）、发消息INSendMessageIntent的意图对象</h5><p>具体在各个阶段的方法里怎么代码实现，主要是要理解<code>INSendMessageIntent</code>的对象属性，通过解析对象，可以在各个阶段用获取到的对象进行相关程序逻辑编码。如：</p>
<table>
<thead>
<tr>
<th>对象名称</th>
<th>类型</th>
<th>备注</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>recipients</code></td>
<td><code>NSArray&lt;INPerson*&gt;</code></td>
<td>Contacts to whom the message should be sent.</td>
</tr>
<tr>
<td><code>content</code></td>
<td><code>NSString</code></td>
<td>Body text of the message.</td>
</tr>
<tr>
<td><code>groupName</code></td>
<td><code>NSString</code></td>
<td>Body text of the message.</td>
</tr>
<tr>
<td><code>serviceName</code></td>
<td><code>NSString</code></td>
<td>Specified service for the message.</td>
</tr>
<tr>
<td><code>sender</code></td>
<td><code>INPerson</code></td>
<td>The person, or account, sending the message.</td>
</tr>
</tbody>
</table>
<p>通过流程方法里获取到<code>INSendMessageIntent</code>对象进行解析，匹配，处理，这个过程还涉及到返回的处理。每一个解析方法都需要得到一个<code>INIntentResolutionResult</code>类型的实例，用来保存校验结果。</p>
<p><code>INIntentResolutionResult</code>及其子类有不同的构造方法生成不同类型的结果，用来指定和Siri的交互。</p>
<table>
<thead>
<tr>
<th>值类型 <code>INIntentResolutionResult</code></th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>+ (instancetype)needsValue;</code></td>
<td>需要一个值，Siri会提示用户给一个值</td>
</tr>
<tr>
<td><code>+ (instancetype)notRequired;</code></td>
<td>不是必要的，是否给值都会过这个resolve</td>
</tr>
<tr>
<td><code>+ (instancetype)unsupported;</code></td>
<td>不支持的，Siri会提示用户这个值不被支持</td>
</tr>
<tr>
<td><code>+(instancetype)successWithResolvedValue:(BOOL)resolvedValue;</code></td>
<td>成功解析</td>
</tr>
<tr>
<td><code>+(instancetype)confirmationRequiredWithValueToConfirm:(nullable NSNumber *)valueToConfirm;</code></td>
<td>Siri提示用户确认当前是否是一个bool值</td>
</tr>
</tbody>
</table>
<p>当一个<code>intent</code>的所有参数都成功解析了，处理程序就会向用户询问是否确认这个<code>intent</code>的细节，并且提供一个建议响应。当所有参数被成功解析后，或者在不要求所有参数进行解析，那么就认为是解析成功。<br>在确认期间，就可以执行所有的<code>intent</code>参数的附加验证，以确保你可以使用该信息来执行所请求的服务。如果之前的解析函数是单元测试，那么这个确认函数就是集成测试，保证所有输入参数正确。</p>
<p>最后一个处理<code>intent</code>的阶段，就是执行与这个<code>intent</code>相关的动作。在<code>-handleSendPayment:completion</code>函数中做相应业务逻辑，需要注意的是你在<code>Extension</code>中做的修改也应当反应到App主程序当中，所以需要提供任务的数据给到App。<code>SiriKit</code>提供了一个包含<code>intent</code>细节（<code>INIntent、INIntentResponse）</code>的<code>InInteraction</code>对象，你可以使用<code>userActivityInstance.interaction</code>得到它，在App启动时调用<br><code>- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void (^)(NSArray *restorableObjects))restorationHandler</code><br>函数处理来自<code>Extension</code>的数据。</p>
<h5 id="4）、根据流程方法处理之后，如何与主程序通信"><a href="#4）、根据流程方法处理之后，如何与主程序通信" class="headerlink" title="4）、根据流程方法处理之后，如何与主程序通信"></a>4）、根据流程方法处理之后，如何与主程序通信</h5><p>轻量级通信可采用这个办法：<br>1）、在<code>handling</code>阶段在<code>NSUserActivity</code>存储相应的信息，字典或字符串都行（如上<code>handling</code>阶段代码）。<br>2）、在<code>AppDelegate</code>，获取<code>NSUserActivity</code>所存储的信息。<br>3）、发送通知给所需要的地方。<br>4）、接收到通知后对主程序进行相应操作。</p>
<p><em>备注：确认消息发送之后的逻辑也可以在处理阶段编码解决</em></p>
<p>有关在AppDelegate中处理SiriKit的Intent可以参考<a href="https://developer.apple.com/documentation/uikit/uiapplicationdelegate/1623072-application?language=objc" target="_blank" rel="external">相关苹果官方文档</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//AppDelegate.m</div><div class="line">- (BOOL)application:(UIApplication *)application willFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    return NO;</div><div class="line">&#125;</div><div class="line">- (BOOL)application:(UIApplication *)application</div><div class="line">   continueUserActivity:(NSUserActivity *)userActivity</div><div class="line">restorationHandler:(void (^)(NSArray *restorableObjects))restorationHandler &#123;</div><div class="line">    if ([userActivity.interaction.intent isKindOfClass:[INSendMessageIntent class]]) &#123;</div><div class="line">        INSendMessageIntent *intent = (INSendMessageIntent *)(userActivity.interaction.intent);</div><div class="line">        NSLog(@&quot;%@&quot;,[[intent.recipients lastObject] displayName]);</div><div class="line">    &#125;</div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2、自定义界面-Intent-UI-Extension"><a href="#2、自定义界面-Intent-UI-Extension" class="headerlink" title="2、自定义界面(Intent UI Extension)"></a>2、自定义界面(Intent UI Extension)</h4><p>运用SiriKit开发相关功能，UI是依赖于<code>Intent UI Extension</code>，<code>SiriKit</code>并不能从系统层面调用App内部<code>UI</code>，只能调用打开App和<code>SirKit</code>自定义<code>UI</code>。</p>
<p>系统创建了<code>ViewController</code>，加载视图，调用<code>viewDidLoad</code>方法并且调用了<code>INUIHostedViewControlling</code>协议的<code>configureWithInteraction:context:completion:</code>方法，传递了一个交互对象，用于配置界面。 当配置完成后，<code>ViewController</code>就会展示在<code>Siri</code>或者<code>Maps</code>应用界面的空白部分。这时会调用<code>viewWillAppear/viewDidAppea</code>r方法。<br>当视图消失时，也会调用生命周期的<code>viewWillDisappear/viewDidDisappear</code>方法。</p>
<p><img src="media/14994794583384/siriUILifeCycle.png" alt="siriUILifeCycle"></p>
<h4 id="关于控制器的使用，苹果给出了几点注意事项："><a href="#关于控制器的使用，苹果给出了几点注意事项：" class="headerlink" title="关于控制器的使用，苹果给出了几点注意事项："></a>关于控制器的使用，苹果给出了几点注意事项：</h4><ol>
<li>切换子控制器来展示不同类型的内容。 你的Intents UI扩展只有一个主视图控制器，如果你想为不同的Intents展示不同的内容，你需要使用不同的视图。可以在<code>configureWithInteraction:context:completion:</code>这个方法里面，根据提供的intentObject来创建不同的子视图。</li>
</ol>
<ol>
<li>在你的视图控制器可用的期间，动态调整内容。 在 <code>viewDidAppear</code>:方法里面才开始启动动画，在<code>viewWillDisappear</code>: 方法里面要结束动画。</li>
</ol>
<ol>
<li>尽快的配置好你的视图控制器，这样<code>Siri</code>才能更快的展示它。 你的视图控制器也许不会在屏幕上停留太久，所以尽量利用本地资源以及提供的<code>INInteraction</code>对象来配置你的设置。如果你需要从服务器拉取更多的信息，请异步完成，并在稍后再更新你的界面。</li>
</ol>
<ol>
<li><strong>请不要在界面里面展示广告</strong>。你可以展示你自己的品牌信息，但是你不能够加入其它广告。<h2 id="三、结束"><a href="#三、结束" class="headerlink" title="三、结束"></a>三、结束</h2>发消息例子：<br>对 <code>Siri</code>说：“用演示给小明发消息”<br><img src="media/14994794583384/IMG_0003.png" alt="IMG_0003"></li>
</ol>
<p>转账例子：<br><img src="media/14994794583384/IMG_0009.png" alt="IMG_0009"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、SiriKit介绍&quot;&gt;&lt;a href=&quot;#一、SiriKit介绍&quot; class=&quot;headerlink&quot; title=&quot;一、SiriKit介绍&quot;&gt;&lt;/a&gt;一、SiriKit介绍&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Siri&lt;/code&gt;是一款苹果 iOS 系统提供的智能
    
    </summary>
    
    
      <category term="iOS开发" scheme="https://github.com/SwiftPlayer/SwiftPlayer.github.io.git/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>打造更简洁的DataModel和ViewModel</title>
    <link href="https://github.com/SwiftPlayer/SwiftPlayer.github.io.git/2017/03/24/%E6%89%93%E9%80%A0%E6%9B%B4%E7%AE%80%E6%B4%81%E7%9A%84DataModel%E5%92%8CViewModel/"/>
    <id>https://github.com/SwiftPlayer/SwiftPlayer.github.io.git/2017/03/24/打造更简洁的DataModel和ViewModel/</id>
    <published>2017-03-24T08:27:07.000Z</published>
    <updated>2017-08-25T15:17:09.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>很多人试图解决 MVC 这种架构下 Controller 比较臃肿的问题，这里我分享一种简洁易懂的Model层，致力于打造更为简洁的DataModel和ViewModel层，同时也适用Controller更加简洁。下面一起分享学习。<a href="https://github.com/SwiftPlayer/ZHModel_Demo">源码：ZHModel_Demo</a></p>
</blockquote>
<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>对于iOS的APP架构，有很多说法和实践，包括<a href="https://casatwy.com/iosying-yong-jia-gou-tan-viewceng-de-zu-zhi-he-diao-yong-fang-an.html" target="_blank" rel="external">MVC、MVVM、MVCS、VIPER</a>等等。我相信大部分开发者都热衷于MVC这种模式，我们对于 MVC 这种设计模式真的用得好吗？其实不是的，MVC 这种分层方式虽然清楚，但是如果使用不当，很可能让大量代码都集中在 Controller 之中。<br>ZHModel_Demo，提供简洁的DataModel和ViewModel示例。将数据请求封装，用ViewModel层连接控制器和数据，同时用属性映射分离出DataModel层，使数据更清晰，更重要的是将 Controller瘦身。</p>
<h1 id="二、说明"><a href="#二、说明" class="headerlink" title="二、说明"></a>二、说明</h1><blockquote>
<p>不论是哪种设计方式，总的架构都是上述那几种，所谓剑法无穷，万剑归宗。但今天我们讨论的是如何将DataModel和ViewModel设计得简洁清晰，可复用。</p>
</blockquote>
<p>这里MVVM 的优点拿来借鉴。具体做法就是将 ViewController 给 View 传递数据这个过程，抽象成构造 ViewModel 的过程。这样抽象之后，View 只接受 ViewModel，而 Controller 只需要传递 ViewModel 这么一行代码。而另外构造 ViewModel 的过程，我们就可以移动到另外的类中了。在具体实践中，我们专门创建构造 ViewModel 工厂类，参见工厂模式。另外，我们也将数据模型通过属性映射对应到DataModel，这样使得所有来回的数据模型清晰可见，容易同意修改和复用。同时也可以专门将数据存取都抽将到一个 Service 层，由这层来提供 ViewModel 的获取。</p>
<h1 id="三、码上说话"><a href="#三、码上说话" class="headerlink" title="三、码上说话"></a>三、码上说话</h1><blockquote>
<p>下面我分享下代码，看看DataModel和ViewModel有什么优势或者不足的地方</p>
</blockquote>
<h4 id="1、目录结构"><a href="#1、目录结构" class="headerlink" title="1、目录结构"></a>1、目录结构</h4><p><img src="http://upload-images.jianshu.io/upload_images/2646525-a34cee8bb04e6562.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="目录结构.png"><br>我们熟知的程序包含：网络请求、数据、控制器（视图，业务？），有时会把这几个关系弄得绕来绕去，导致代码臃肿，不好复用和维护。但所有情况无非就是：</p>
<blockquote>
<p>1、数据怎么来？<br>2、数据怎么桥接？<br>3、数据怎么呈现？</p>
</blockquote>
<h6 id="1）、数据怎么来？"><a href="#1）、数据怎么来？" class="headerlink" title="1）、数据怎么来？"></a>1）、数据怎么来？</h6><p>上述目录解析：</p>
<blockquote>
<p>1、网络请求封装成<strong>NetRequest</strong>模块（还包括<strong>HTTPClient</strong>类，这里略）<br>2、数据请求总出口封装在<strong>ZHRequestMethod</strong>类中<br>3、将收到的数据映射到数据模型DataModel(基于<strong>ZHResponseBaseModel  </strong>  )</p>
</blockquote>
<h6 id="1）、数据怎么桥接？"><a href="#1）、数据怎么桥接？" class="headerlink" title="1）、数据怎么桥接？"></a>1）、数据怎么桥接？</h6><p>上述目录解析：</p>
<blockquote>
<p>1、数据模型和View的桥接用到了ViewModel（基于<strong>ZHViewBaseModel</strong>）<br>2、 用继承于<strong>ZHViewBaseModel</strong>的<strong>PublicViewBaseModel</strong>处理具体网络请求，数据模型和控制器视图的关系</p>
</blockquote>
<h6 id="1）、数据怎么呈现？"><a href="#1）、数据怎么呈现？" class="headerlink" title="1）、数据怎么呈现？"></a>1）、数据怎么呈现？</h6><blockquote>
<p>我们的目的是什么？就是为了让数据呈现更加简洁，让呈现数据的视图控制器变的优雅。视图呈现利用ViewModel轻松展示。</p>
</blockquote>
<h4 id="2、数据模型DataModel层"><a href="#2、数据模型DataModel层" class="headerlink" title="2、数据模型DataModel层"></a>2、数据模型DataModel层</h4><p>数据模型DataModel分为网络请求<strong><em>返回参数模型</em></strong>和<strong><em>发送参数模型</em></strong><br><strong>返回参数模型基类ZHResponseBaseModel</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">//  ZHResponseBaseModel.h</div><div class="line">//  ZHModel_Demo</div><div class="line">//</div><div class="line">//  Created by haofree on 2017/3/3.</div><div class="line">//  Copyright © 2017年 haofree. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface ZHResponseBaseModel : NSObject</div><div class="line"></div><div class="line">- (void)decodeJsontoDictionary:(NSDictionary*)dic;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">//  ZHResponseBaseModel.m</div><div class="line">//  ZHModel_Demo</div><div class="line">//</div><div class="line">//  Created by haofree on 2017/3/3.</div><div class="line">//  Copyright © 2017年 haofree. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &quot;ZHResponseBaseModel.h&quot;</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line"></div><div class="line">@implementation ZHResponseBaseModel</div><div class="line"></div><div class="line">- (void)decodeJsontoDictionary:(NSDictionary*)dic&#123;</div><div class="line">    if (![dic isKindOfClass:[NSDictionary class]]) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    for (NSString *key in dic) &#123;</div><div class="line">        if ([self respondsToSelector:@selector(setValue:forKey:)]) &#123;</div><div class="line">            if (class_getProperty([self class], [key UTF8String])) &#123;</div><div class="line">                if (![dic[key] isKindOfClass:[NSNull class]] ) &#123;</div><div class="line">                    [self setValue:dic[key] forKey:key];</div><div class="line">                &#125;else&#123;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>将数据请求返回的Json字典通过属性映射到各个模型字段中，例如Demo当中有三个对应的返回模型，当然这种对应的返回数据模型和参数模型可以放大每个子业务当中。这里以其中一个为例子：<strong>Type1ResponseModel</strong>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">//  Type1ResponseModel.h</div><div class="line">//  ZHModel_Demo</div><div class="line">//</div><div class="line">//  Created by haofree on 2017/3/3.</div><div class="line">//  Copyright © 2017年 haofree. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &quot;ZHResponseBaseModel.h&quot;</div><div class="line"></div><div class="line">/***********对应的Json格式*******</div><div class="line">&#123;</div><div class="line"> &quot;responseCode&quot;:&quot;0000&quot;,</div><div class="line"> &quot;responseMsg&quot;:&quot;返回成功&quot;,</div><div class="line"> &quot;remark&quot;:&quot;交流学习&quot;,</div><div class="line"> &quot;userName&quot;:&quot;简书Haofree&quot;,</div><div class="line"> &quot;taskNo&quot;:1</div><div class="line">&#125;</div><div class="line">******************************/</div><div class="line"></div><div class="line">@interface Type1ResponseModel : ZHResponseBaseModel</div><div class="line"></div><div class="line">@property (nonatomic , copy) NSString *responseCode;        //响应结果码</div><div class="line"></div><div class="line">@property (nonatomic , copy) NSString *responseMsg;         //响应消息</div><div class="line"></div><div class="line">@property (nonatomic , copy) NSString *remark;              //备注</div><div class="line"></div><div class="line">@property (nonatomic , copy) NSString *userName;            //名字</div><div class="line"></div><div class="line">@property (nonatomic , assign) NSInteger taskNo;            //索引号</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">//  Type1ResponseModel.m</div><div class="line">//  ZHModel_Demo</div><div class="line">//</div><div class="line">//  Created by haofree on 2017/3/3.</div><div class="line">//  Copyright © 2017年 haofree. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &quot;Type1ResponseModel.h&quot;</div><div class="line"></div><div class="line">@implementation Type1ResponseModel</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>这样当数据请求返回相应的Json字典时可以清晰解析并且通过KVC属性赋值建起返回的数据模型，当然里时最简单的Json，例子中还涉及到了Json中要嵌套的和数组的这种常见的格式。这种把业务字段封装成返回数据模型方便清晰，也可以放到一个大项目的子模块当中去。</p>
<p><strong>发送参数模型基类ZHParamBaseModel:</strong></p>
<blockquote>
<p>既然返回的数据模型可以提取出来封装，我们业务请求当中还有很多需要发送的参数，这如果分散放在视图控制器中将会很糟糕。同样我们可以将每个业务请求的参数封装在类中，这样修改起来我们不关系视图控制器，只关心这个发送参数类，使得数据业务和视图控制器得到很好的分离。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">//  ZHParamBaseModel.h</div><div class="line">//  ZHModel_Demo</div><div class="line">//</div><div class="line">//  Created by haofree on 2017/3/3.</div><div class="line">//  Copyright © 2017年 haofree. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">@interface ZHParamBaseModel : NSObject</div><div class="line"></div><div class="line">-(NSDictionary*)covertToDic;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">//  ZHParamBaseModel.m</div><div class="line">//  ZHModel_Demo</div><div class="line">//</div><div class="line">//  Created by haofree on 2017/3/3.</div><div class="line">//  Copyright © 2017年 haofree. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &quot;ZHParamBaseModel.h&quot;</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line">@implementation ZHParamBaseModel</div><div class="line"></div><div class="line">- (NSDictionary *)covertToDic&#123;</div><div class="line">    return [self getPropertyList:[self class]];;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSDictionary *)getPropertyList: (Class)clazz</div><div class="line">&#123;</div><div class="line">    u_int count;</div><div class="line">    unsigned int outCount;</div><div class="line">    Ivar* ivars = class_copyIvarList(clazz, &amp;count);</div><div class="line">    objc_property_t *properties = class_copyPropertyList(clazz, &amp;outCount);</div><div class="line">    NSMutableDictionary *propertyDic = [NSMutableDictionary dictionary];</div><div class="line">    for (int i = 0; i &lt; count ; i++)&#123;</div><div class="line">        objc_property_t property = properties[i];</div><div class="line">        const char *propName = property_getName(property);</div><div class="line">        </div><div class="line">        id value = [self valueForKey:[NSString stringWithFormat:@&quot;%s&quot;,propName]];</div><div class="line">        if (value == nil || [value isKindOfClass:[NSNull class]]) &#123;</div><div class="line">        &#125;else&#123;</div><div class="line">            [propertyDic setValue:value forKey:[NSString  stringWithCString:propName encoding:NSUTF8StringEncoding] ];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    free(ivars);</div><div class="line">    return propertyDic;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h4 id="2、-视图-数据-桥接模型ViewModel层"><a href="#2、-视图-数据-桥接模型ViewModel层" class="headerlink" title="2、(视图-数据)桥接模型ViewModel层"></a>2、(视图-数据)桥接模型ViewModel层</h4><p>(视图-数据)桥接模型ViewModel的基类：<strong>ZHViewBaseModel</strong></p>
<blockquote>
<p>1、将不同的返回的Json字典转换为数据模型<br>2、将接收封装数据模型通过block回调</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">//  ZHViewBaseModel.h</div><div class="line">//  ZHModel_Demo</div><div class="line">//</div><div class="line">//  Created by haofree on 2017/3/3.</div><div class="line">//  Copyright © 2017年 haofree. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">//定义返回请求数据的block类型</div><div class="line">typedef void (^ReturnValueBlock) (id returnValue);</div><div class="line">typedef void (^FailureBlock)(NSUInteger statusCode, NSString *error);</div><div class="line"></div><div class="line">@interface ZHViewBaseModel : NSObject</div><div class="line"></div><div class="line">@property (copy, nonatomic) ReturnValueBlock returnBlock;</div><div class="line">@property (copy, nonatomic) FailureBlock failureBlock;</div><div class="line"></div><div class="line">//接收封装数据请求返回的block</div><div class="line">-(void) setBlockWithReturnBlock: (ReturnValueBlock) returnBlock</div><div class="line">               WithFailureBlock: (FailureBlock) failureBlock;</div><div class="line"></div><div class="line">//将返回的Json字典转换为数据模型</div><div class="line">-(id)process:(NSString*)className dic:(id)response;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">//  ZHViewBaseModel.m</div><div class="line">//  ZHModel_Demo</div><div class="line">//</div><div class="line">//  Created by haofree on 2017/3/3.</div><div class="line">//  Copyright © 2017年 haofree. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &quot;ZHViewBaseModel.h&quot;</div><div class="line">#import &lt;objc/runtime.h&gt;</div><div class="line"></div><div class="line"></div><div class="line">@implementation ZHViewBaseModel</div><div class="line"></div><div class="line">#pragma 接收封装数据请求透穿过来的block</div><div class="line">-(void) setBlockWithReturnBlock: (ReturnValueBlock) returnBlock</div><div class="line">               WithFailureBlock: (FailureBlock) failureBlock&#123;</div><div class="line">    _returnBlock = [returnBlock copy];</div><div class="line">    _failureBlock = [failureBlock copy];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(id)process:(NSString*)className dic:(id)response&#123;</div><div class="line">    __strong Class model = [NSClassFromString(className) alloc];</div><div class="line">    SEL selector = NSSelectorFromString(@&quot;decodeJsontoDictionary:&quot;);</div><div class="line">    if ([model respondsToSelector:selector]) &#123;</div><div class="line">        [model performSelector:selector withObject:response];</div><div class="line">    &#125;</div><div class="line">    return model;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>另外就是具体处理网络请求出口的公共ViewModel类：<strong>PublicViewBaseModel</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">//  PublicViewBaseModel.h</div><div class="line">//  ZHModel_Demo</div><div class="line">//</div><div class="line">//  Created by haofree on 2017/3/3.</div><div class="line">//  Copyright © 2017年 haofree. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &quot;ZHViewBaseModel.h&quot;</div><div class="line"></div><div class="line">@interface PublicViewBaseModel : ZHViewBaseModel</div><div class="line"></div><div class="line">//数据请求层，举例三个数据请求</div><div class="line">- (void)sendType1Request:(NSDictionary*)dic;</div><div class="line"></div><div class="line">- (void)sendType2Request:(NSDictionary*)dic;</div><div class="line"></div><div class="line">- (void)sendType3Request:(NSDictionary*)dic;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">//  PublicViewBaseModel.m</div><div class="line">//  ZHModel_Demo</div><div class="line">//</div><div class="line">//  Created by haofree on 2017/3/3.</div><div class="line">//  Copyright © 2017年 haofree. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &quot;PublicViewBaseModel.h&quot;</div><div class="line">#import &quot;ZHRequestMethod.h&quot;</div><div class="line"></div><div class="line">@implementation PublicViewBaseModel</div><div class="line"></div><div class="line">- (void)sendType1Request:(NSDictionary*)dic&#123;</div><div class="line">    [self requestNet:dic type:RequestInterfaceNO1];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)sendType2Request:(NSDictionary*)dic&#123;</div><div class="line">    [self requestNet:dic type:RequestInterfaceNO2];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)sendType3Request:(NSDictionary*)dic&#123;</div><div class="line">    [self requestNet:dic type:RequestInterfaceNO3];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)requestNet:(NSDictionary*)dic type:(RequestInterface)type&#123;</div><div class="line">    __weak typeof(self) weakSelf = self;</div><div class="line">    [ZHRequestMethod startRequest:dic type:type success:^(id responseObject)&#123;</div><div class="line">        NSLog(@&quot;%@&quot;, responseObject);</div><div class="line">        __strong typeof(weakSelf) strongSelf = weakSelf;</div><div class="line">        if (strongSelf) &#123;</div><div class="line">            [strongSelf sucessResponse:responseObject type:type];</div><div class="line">        &#125;</div><div class="line">    &#125;failure:^(NSUInteger statusCode, NSString *error)&#123;</div><div class="line">        __strong typeof(weakSelf) strongSelf = weakSelf;</div><div class="line">        if (strongSelf) &#123;</div><div class="line">            strongSelf.failureBlock(statusCode,error);</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)sucessResponse:(id)responseObject type:(RequestInterface)type&#123;</div><div class="line">    NSString *className = @&quot;&quot;;</div><div class="line">    switch (type) &#123;</div><div class="line">        case RequestInterfaceNO1:</div><div class="line">            className = @&quot;Type1ResponseModel&quot;;</div><div class="line">            break;</div><div class="line">        case RequestInterfaceNO2:</div><div class="line">            className = @&quot;Type2ResponseModel&quot;;</div><div class="line">            break;</div><div class="line">        case RequestInterfaceNO3:</div><div class="line">            className = @&quot;Type3ResponseModel&quot;;</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">    id result = [self process:className dic:responseObject];</div><div class="line">    if (self.returnBlock) &#123;</div><div class="line">        self.returnBlock(result);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h4 id="1、视图呈现"><a href="#1、视图呈现" class="headerlink" title="1、视图呈现"></a>1、视图呈现</h4><p>例子中一个视图控制器有三个数据请求和对应的数据，返回数据一个地方处理即可，简洁，需要用到数据的，直接从数据模型中取值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">//</div><div class="line">//  ViewController.m</div><div class="line">//  ZHModel_Demo</div><div class="line">//</div><div class="line">//  Created by haofree on 2017/3/3.</div><div class="line">//  Copyright © 2017年 haofree. All rights reserved.</div><div class="line">//</div><div class="line"></div><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &quot;PublicViewBaseModel.h&quot;</div><div class="line">#import &quot;Type1ResponseModel.h&quot;</div><div class="line">#import &quot;Type2ResponseModel.h&quot;</div><div class="line">#import &quot;Type3ResponseModel.h&quot;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line">@property (nonatomic , strong) PublicViewBaseModel *viewModel;</div><div class="line">@property (nonatomic , strong) Type1ResponseModel  *responseModel_1;</div><div class="line">@property (nonatomic , strong) Type2ResponseModel  *responseModel_2;</div><div class="line">@property (nonatomic , strong) Type3ResponseModel  *responseModel_3;</div><div class="line">@property (nonatomic , strong) Type3ResponseSubListModel  *responseSubListModel_3;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    self.viewModel = [[PublicViewBaseModel alloc] init];</div><div class="line">    self.responseModel_1 = [[Type1ResponseModel alloc] init];</div><div class="line">    self.responseModel_2 = [[Type2ResponseModel alloc] init];</div><div class="line">    self.responseModel_3 = [[Type3ResponseModel alloc] init];</div><div class="line">    self.responseSubListModel_3 = [[Type3ResponseSubListModel alloc] init];</div><div class="line">    [self getResponseDataModel];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)didReceiveMemoryWarning &#123;</div><div class="line">    [super didReceiveMemoryWarning];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//返回的数据</div><div class="line">- (void) getResponseDataModel&#123;</div><div class="line">    __weak __typeof(self)wekself = self;</div><div class="line">    [self.viewModel setBlockWithReturnBlock:^(id returnValue) &#123;</div><div class="line">        __strong typeof(wekself)strongSelf = wekself;</div><div class="line">        if ([returnValue isKindOfClass:[Type1ResponseModel class]]) &#123;</div><div class="line">            strongSelf.responseModel_1 = (Type1ResponseModel*)returnValue;</div><div class="line">            NSLog(@&quot;responseModel_1:%@&quot;,strongSelf.responseModel_1);</div><div class="line">        &#125;else if ([returnValue isKindOfClass:[Type2ResponseModel class]])&#123;</div><div class="line">            strongSelf.responseModel_2 = (Type2ResponseModel*)returnValue;</div><div class="line">            NSLog(@&quot;responseModel_2:%@&quot;,strongSelf.responseModel_2);</div><div class="line">            </div><div class="line">        &#125;else if ([returnValue isKindOfClass:[Type3ResponseModel class]])&#123;</div><div class="line">            strongSelf.responseModel_3 = (Type3ResponseModel*)returnValue;</div><div class="line">            strongSelf.responseSubListModel_3 = strongSelf.responseModel_3.subTaskList[0];</div><div class="line">            NSLog(@&quot;responseModel_3:%@&quot;,strongSelf.responseModel_3);</div><div class="line">        &#125;else&#123;</div><div class="line">            NSLog(@&quot;无法识别的模型类&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; WithFailureBlock:^(NSUInteger statusCode, NSString *error) &#123;</div><div class="line">        NSLog(@&quot;错误码:%lu,错误信息：%@&quot;,(unsigned long)statusCode,error);</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//发送的请求</div><div class="line">- (IBAction)requestBtn1:(id)sender&#123;</div><div class="line">    [self.viewModel sendType1Request:@&#123;&#125;];</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">       </div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>文章分享用于交流学习，一直处于学习积累过程中，文中最开始的思路来自于<a href="https://github.com/lizelu/MVVM">李泽鲁—青玉伏案大神的MVVM工程架构</a>，在这个基础上做了更多的改进。技术的积累，源于吸取，感谢同事和一起学习的朋友，大家批判指正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很多人试图解决 MVC 这种架构下 Controller 比较臃肿的问题，这里我分享一种简洁易懂的Model层，致力于打造更为简洁的DataModel和ViewModel层，同时也适用Controller更加简洁。下面一起分享学习。&lt;a href=
    
    </summary>
    
    
      <category term="iOS开发" scheme="https://github.com/SwiftPlayer/SwiftPlayer.github.io.git/tags/iOS%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
